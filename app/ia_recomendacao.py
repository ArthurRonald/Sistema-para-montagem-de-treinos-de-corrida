import streamlit as st
import google.generativeai as genai
from fpdf import FPDF


API_KEY = "AIzaSyBUb0tOQMD1mrcAu5DCtaAMEU_zer7nxwE"  # Substitua pela sua key Gemini
genai.configure(api_key=API_KEY)


def gerar_treino_personalizado(dados_usuario, nivel):
    prompt = f"""
    Voc√™ √© um treinador especialista em corrida.

    Gere um plano de corrida para o seguinte perfil:

    - N√≠vel: {nivel}
    - Objetivo: {dados_usuario['objetivo']}
    - Dist√¢ncia desejada: {dados_usuario['distancia']} km
    - Dias por semana: {dados_usuario['dias_por_semana']}
    - Minutos por dia: {dados_usuario['minutos_por_dia']}
    - Hist√≥rico de les√£o: {dados_usuario['lesao']}
    - Prazo total: {dados_usuario['dias_total']} dias

    Divida o plano por dia, seja espec√≠fico com os tipos de treino (ex: Trote leve 30min, Intervalado, Long√£o).
    N√£o use academia nem equipamentos avan√ßados. N√ÉO USE CARACTERES UNICODE, exceto acentos graficos de pontua√ßao (n√£o precisa dizer na resposta que n√£o vai usar esses caracteres.)
    """

    model = genai.GenerativeModel('gemini-2.5-flash')

    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Erro ao gerar o treino: {e}")
        return "‚ùå N√£o foi poss√≠vel gerar o treino no momento."


def gerar_pdf(nome, treino_texto):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, f"Plano de Treino Personalizado para {nome}", ln=True, align='C')
    
    pdf.set_font("Arial", "", 12)
    for linha in treino_texto.split('\n'):
        pdf.multi_cell(0, 10, linha)

    return pdf.output(dest='S').encode('latin-1')  # Retorna o PDF como bytes para download no Streamlit



st.title("üèÉ Treino Personalizado")

# Dados da sess√£o
previsao_numerica = st.session_state.get("previsao")
nivel_texto = ""

if previsao_numerica == 0:
    nivel_texto = "Avan√ßado"
elif previsao_numerica == 1:
    nivel_texto = "Iniciante"
elif previsao_numerica == 2:
    nivel_texto = "Intermedi√°rio"
else:
    st.error("N√≠vel n√£o reconhecido. Por favor, refa√ßa o question√°rio.")

dados_usuario = st.session_state.get("dados_usuario", {})

# Conferindo se os dados necess√°rios est√£o dispon√≠veis
campos_necessarios = ["objetivo_encoded", "Dist√¢ncia (km)", "Atividades/semana", "Tempo (min)", "lesao_encoded"]
if all(campo in dados_usuario for campo in campos_necessarios):

    # Montando os dados para o prompt
    entrada_ia = {
        "objetivo": dados_usuario["objetivo_encoded"],
        "distancia": dados_usuario["Dist√¢ncia (km)"],
        "dias_por_semana": dados_usuario["Atividades/semana"],
        "minutos_por_dia": dados_usuario["Tempo (min)"],
        "lesao": dados_usuario["lesao_encoded"],
        "dias_total": 30  # Pode ajustar esse valor se quiser
    }

    if st.button("üöÄ Gerar Treino"):
        treino_texto = gerar_treino_personalizado(entrada_ia, nivel_texto)

        if treino_texto:
            st.markdown("### ‚úÖ Plano de Treino Gerado pela IA:")
            st.text_area("üìã Treino:", treino_texto, height=400)

            # Bot√£o de Download do PDF
            pdf_bytes = gerar_pdf(dados_usuario.get("Nome", "Usu√°rio"), treino_texto)

            st.download_button(
                label="üì• Baixar Treino em PDF",
                data=pdf_bytes,
                file_name="treino_personalizado.pdf",
                mime="application/pdf"
            )

else:
    st.warning("‚ö†Ô∏è Dados incompletos. Volte e preencha o question√°rio primeiro.")
