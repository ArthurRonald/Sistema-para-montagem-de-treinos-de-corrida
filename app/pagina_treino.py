import streamlit as st
import google.generativeai as genai
from fpdf import FPDF


API_KEY = "AIzaSyBUb0tOQMD1mrcAu5DCtaAMEU_zer7nxwE"
# metodo do gemini pra configurar. tem como parametro o api key igualando a alguma variavel.
genai.configure(api_key=API_KEY)

# funcao pra pedir o treino pra o gemini
#prompt √© o que a ia ir√° receber como pedido
def gerar_treino_personalizado(entrada_ia):
    prompt = f"""
    Voc√™ √© um treinador especialista em corrida.

    Gere um plano de corrida para o seguinte perfil:

    - N√≠vel: {entrada_ia['nivel']}
    - Nome: {entrada_ia['nome']}
    - Peso: {entrada_ia['peso']} kg
    - Altura: {entrada_ia['altura']} cm
    - Tempo m√©dio por treino: {entrada_ia['tempo_medio_treino']} minutos
    - Dist√¢ncia m√©dia por treino: {entrada_ia['distancia_media_treino']} km
    - Pace m√©dio: {entrada_ia['pace']} min/km
    - Hist√≥rico de les√£o: {entrada_ia['lesao']}
    - Dias que pratica atividade f√≠sica: {entrada_ia['dias_por_semana']}
    - Objetivo: {entrada_ia['objetivo']}
    - Tempo dispon√≠vel por dia: {entrada_ia['tempo_disponivel_minutos']} minutos
    - Dist√¢ncia alvo: {entrada_ia['distancia_desejada']} km
    - Dias totais de treino: {entrada_ia['dias_de_treino']} dias

    Deixe todo treino organizado de maneira justificada. Liste todas as vari√°veis na introdu√ß√£o do treino.  N√≠vel, peso, altura, tempo medio, tudo... Divida o plano por dia, seja espec√≠fico com os tipos de treino (ex: Trote leve 30min, Intervalado, Long√£o).
    N√£o use academia nem equipamentos avan√ßados. N√£o use negrito em nenhuma palavra. Acentue corretamente as palavras, mas n√£o use caracteres como emojis, asteriscos nem tra√ßos (hifens), exceto acentos graficos de pontua√ßao (n√£o precisa dizer na resposta que n√£o vai usar esses caracteres.) Para separar as linhas, nao use nenhum caractere especial.
    """

    model = genai.GenerativeModel('gemini-2.5-flash') 

    try:
        response = model.generate_content(prompt) #aqui pede pra ia gerar
        return response.text # e retorna pra essa variavel a resposta
    
    except Exception as e: #caso de erro, √© capturado e retorna uma mensagem
        st.error(f"Erro ao gerar o treino: {e}")
        return "‚ùå N√£o foi poss√≠vel gerar o treino no momento."


def gerar_pdf(nome, treino_texto): #argumentos pra dizer o nome e colocar o treino no pdf
    pdf = FPDF() 
    pdf.add_page() #adiciona a pagina
    pdf.set_font("Arial", "B", 16) #fonte, negrito, tamanho
    pdf.cell(
        0, 10, f"Plano de Treino Personalizado para {nome}", ln=True, align='C') 
    #ocupa toda a largura, define a altura, proximo comando vai pra outra linha, centralizado

    pdf.set_font("Arial", "", 12) #nao negrito
    for linha in treino_texto.split('\n'): #divide a resposta da ia em linhas, e roda em loop
        pdf.multi_cell(0, 10, linha)

    return pdf.output(dest='S').encode('latin-1')  #salva o pdf na memoria (bytes)


# funcao pra nao quebrar se vier emoji ou outro unicode
def limpar_texto_pdf(treino_texto):
    return treino_texto.encode('latin-1', errors='ignore').decode('latin-1')


titulo = st.title("üèÉ Treino Personalizado")

# ia de previsao numerica
previsao_numerica = st.session_state.get("previsao")
nivel_texto = "" #inicializa a string como vazia

if previsao_numerica == 0:
    nivel_texto = "Avan√ßado"
elif previsao_numerica == 1:
    nivel_texto = "Iniciante"
elif previsao_numerica == 2:
    nivel_texto = "Intermedi√°rio"
else:
    st.error("N√≠vel n√£o reconhecido. Por favor, refa√ßa o question√°rio.")

dados_usuario = st.session_state.get("dados_usuario", {}) #puxa os dados do cara


# conferir alguns dados
campos_necessarios = ["objetivo_encoded",
                      "Dist√¢ncia (km)", "Atividades/semana", "Tempo (min)", "lesao_encoded"]

#funcao all gera um true ou false
#so e true se todos os campos estiverem em dados usuario
if all(campo in dados_usuario for campo in campos_necessarios):

    # dados pro prompt
    entrada_ia = {
        "nivel": nivel_texto,
        "nome": st.session_state["dados_usuario"]["Nome"],
        "peso": st.session_state["dados_usuario"]["Peso (kg)"],
        "altura": st.session_state["dados_usuario"]["Altura (cm)"],
        "tempo_medio_treino": st.session_state["dados_usuario"]["Tempo (min)"],
        "distancia_media_treino": st.session_state["dados_usuario"]["Dist√¢ncia (km)"],
        "pace": st.session_state["dados_usuario"]["Pace (min/km)"],
        "lesao": st.session_state["dados_usuario"]["lesao_encoded"],
        "dias_por_semana": st.session_state["dados_usuario"]["Atividades/semana"],
        "objetivo": st.session_state["dados_usuario"]["objetivo_encoded"],
        "tempo_disponivel_minutos": st.session_state["dados_usuario"]["Tempo disponivel"],
        "distancia_desejada": st.session_state["dados_usuario"]["Dist√¢ncia desejada"],
        "dias_de_treino": st.session_state["dados_usuario"]["Dias de treino"]
    }

    if st.session_state.get("auto_gerar_pdf"):

        if "Treino ia" not in st.session_state:  # so gera o pdf se for a primeira vez

            with st.spinner("Cria√ß√£o do treino em progresso. Aguarde alguns instantes..."):
                
                treino_texto = gerar_treino_personalizado(entrada_ia) #gera o treino com base na entrada ia
                treino_texto_limpo = limpar_texto_pdf(treino_texto)  # chama a funcao de ajeitar os unicode
                st.session_state["Treino ia"] = treino_texto_limpo #salva na memoria o treino

        # Pra nao gerar infinitamente
        st.session_state["auto_gerar_pdf"] = False 

    if "Treino ia" in st.session_state:

        treino_texto_limpo = st.session_state["Treino ia"] #define de novo pra nao quebrar

        # botao de download do pdf
        pdf_bytes = gerar_pdf(dados_usuario.get(
            "Nome", "Usu√°rio"), treino_texto_limpo) #se nao achar o nome usa usuario e gera o pdf
        st.subheader(
            f"‚úÖ Plano de treino gerado com sucesso! Seu n√≠vel ideal para sua atividade √© **{nivel_texto}**")
        botao_download = st.download_button(
            label="üì• Baixar Treino em PDF",
            data=pdf_bytes,
            file_name="treino_personalizado.pdf",
            mime="application/pdf" #define o tipo pro navegador entender
        ) 


else:
    st.warning("‚ö†Ô∏è Dados n√£o encontrados. Ser√° que voc√™ preencheu o formul√°rio?")


# Verifica se os dados do usu√°rio est√£o salvos
if "dados_usuario" in st.session_state:
    dados = st.session_state["dados_usuario"]
    TOTAL_DIAS = dados["Dias de treino"]

    st.subheader(f"üèÉ Lista de Treino - {TOTAL_DIAS} Dias")

    # Inicializa lista de treinos se ainda n√£o existir
    if "treinos" not in st.session_state or len(st.session_state.treinos) != TOTAL_DIAS:
        st.session_state.treinos = [False] * TOTAL_DIAS

    # Inicializa controle da mensagem de sucesso
    if "ultimo_concluido" not in st.session_state:
        st.session_state.ultimo_concluido = None

    # Determina qual √© o pr√≥ximo treino n√£o conclu√≠do
    proximo = None
    for i, feito in enumerate(st.session_state.treinos):
        if not feito:
            proximo = i
            break

    for i in range(TOTAL_DIAS):
        dia = i + 1

        if st.session_state.treinos[i]:
            st.markdown(f"‚úÖ Treino Dia {dia}")
        elif i == proximo:

            if st.session_state.ultimo_concluido == dia:
                st.success(f"‚úÖ Treino do Dia conclu√≠do com sucesso!")

            if st.button(f"‚úÖ Concluir Treino Dia {dia}"):
                st.session_state.treinos[i] = True
                # Marca o pr√≥ximo dia como a pr√≥xima meta
                st.session_state.ultimo_concluido = dia + 1
                st.rerun()
        else:
            st.markdown(f"üîí Treino Dia {dia}")

    progresso = sum(st.session_state.treinos) / TOTAL_DIAS
    st.progress(progresso)

    if progresso == 1.0:
        st.success(
            f"üéâ Parab√©ns, voc√™ concluiu todos os seus treinos para alcan√ßar seu objetivo de {dados["Dist√¢ncia desejada"]}Km!")
        if st.button("Avalie o seu plano! üí¨"):
            st.switch_page("pagina_final.py")
